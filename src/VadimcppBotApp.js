const ANY_PUBLIC_CHAT_VOCABULARY = [
  {
    questions: [
      '–ü—Ä–∏–≤–µ—Ç',
      '–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç',
    ],
    answer: '–ü—Ä–∏–≤–µ—Ç üëã',
  },
];

const BORINORGE_CHAT_ID = -1001784009474;
const BORINORGE_CHAT_VOCABULARY = [
  {
    questions: [ '—Ä–æ–∑–º–æ–≤–ª—è—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é?' ],
    answer: '–†–æ–∑–º–æ–≤–ª—è—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é - —á—É–¥–æ–≤–æ! üá∫üá¶',
  },
  {
    questions: [ '–∫—É—Ä—Å–∏ –Ω–æ—Ä–≤–µ–∑—å–∫–æ—ó –º–æ–≤–∏' ],
    answer: '–ó–∞–ø—Ä–æ—à—É—é —Ä–∞–∑–æ–º –≤–∏–≤—á–∞—Ç–∏ –Ω–æ–≤–µ–∑—å–∫—É –º–æ–≤—É –≤ –º—ñ–π –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º - [kom.fra.ukraina](https://instagram.com/kom.fra.ukraina)',
  },
  {
    questions: [ '—É–∫—Ä–∞–∏–Ω—Ü–∞–º –ø—Ä–æ–µ–∑–¥ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π?' ],
    answer: '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–µ–∑–¥ —Ç–æ–ª—å–∫–æ –≤ —Ü–µ–Ω—Ç—Ä –ø—Ä–∏–µ–º–∞ –±–µ–∂–µ–Ω—Ü–µ–≤.',
  },
];

const KOVCHEG_CHAT_ID = -1001536533168;
const KOVCHEG_CHAT_VOCABULARY = [
  {
    questions: [
      '–ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–π –≤–∏–∑—ã',
      '–ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –≤–∏–∑—ã',
      '–ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—á—É—é –≤–∏–∑—É'
    ],
    answer:
      '–í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Ä–∞–±–æ—á–∞—è –≤–∏–∑–∞ —ç—Ç–æ Skilled worker, –Ω–æ –µ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ —Å–ª—É—á–∞–∏. –°—Å—ã–ª–∫–∞: ' +
      '[UDI - work immigration](https://www.udi.no/en/want-to-apply/work-immigration/?c=rus)',
  },
];

const PRIVATE_CHAT_VOCABULARY = [
  ...ANY_PUBLIC_CHAT_VOCABULARY,
  ...BORINORGE_CHAT_VOCABULARY,
  ...KOVCHEG_CHAT_VOCABULARY,
  {
    questions: [
      '–ü—Ä–∏–≤–µ—Ç',
      '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é',
      '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
      '–î–æ–±—Ä—ã–π –¥–µ–Ω—å',
      '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä',
      '–ó–¥–æ—Ä–æ–≤–∞',
      '–í—ñ—Ç–∞—é',
      '–î–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫',
      '–î–æ–±—Ä–∏–π –¥–µ–Ω—å',
      '–î–æ–±—Ä–∏–π –≤–µ—á—ñ—Ä',
      "–ó–¥–æ—Ä–æ–≤–µ–Ω—å–∫–∏ –±—É–ª–∏",
    ],
    answer: '–ü—Ä–∏–≤–µ—Ç üëã',
  },
  {
    questions: [
      '–Ø–∫ —Å–ø—Ä–∞–≤–∏?',
      '–Ø–∫ –∂–∏—Ç—Ç—è?',
      '–©–æ —Ä–æ–±–∏—à?',
      '–©–æ –ø–æ—Ä–æ–±–ª—è—î—à?',
      '–ö–∞–∫ –¥–µ–ª–∞?',
      '–ö–∞–∫ –∂–∏–∑–Ω—å?',
      '–ö–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å?',
      '–ß—Ç–æ –¥–µ–ª–∞–µ—à—å?',
    ],
    answer: '–í—Å–µ —Ö–æ—Ä–æ—à–æ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
  },
];

function normalizeText(text) {
  // remove spaces
  let normalized = text.trim();

  // put all to lowercase
  normalized = normalized.toLowerCase();

  // replace '–π' to '–∏'
  normalized = normalized.replace('–π', '–∏');

  // replace '—ë' to '–µ'
  normalized = normalized.replace('—ë', '–µ');

  return normalized;
}

class VadimcppBotApp {
  constructor() {
    console.log('');
    console.log('[VadimcppBotApp]: Create Application...');
  }

  handleMessage(msg, bot) {
    console.log(''); // NOTE! view logs on your server
    console.log(JSON.stringify(msg));

    const isPrivateMsg = msg.chat.id > 0;
    if (isPrivateMsg) {
      this._handlePrivate(msg, bot);
    } else if (msg.chat.id === BORINORGE_CHAT_ID) {
      this._handleChat(msg, bot, BORINORGE_CHAT_VOCABULARY)
    } else if (msg.chat.id === KOVCHEG_CHAT_ID) {
      this._handleChat(msg, bot, KOVCHEG_CHAT_VOCABULARY)
    } else {
      this._handleChat(msg, bot, ANY_PUBLIC_CHAT_VOCABULARY)
    }
  }

  _handlePrivate(msg, bot) {
    if (msg.text === '/start') {
      const startAnswer = `${this._getName(msg)}, –ø—Ä–∏–≤–µ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;
      bot.sendMessage(msg.chat.id, startAnswer, {
        parse_mode: "markdown",
        disable_web_page_preview: true,
      }).then();
    } else {
      // In private chat bot react on every message
      const answer = this._getAnswer(msg.text, PRIVATE_CHAT_VOCABULARY);
      const alternative = `${this._getName(msg)}, —è –Ω–µ –∑–Ω–∞—é, —Å–ø—Ä–æ—Å–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É @vadimcpp. –û–Ω –º–µ–Ω—è —É—á–∏—Ç.`;
      bot.sendMessage(msg.chat.id, answer || alternative, {
        parse_mode: "markdown",
        disable_web_page_preview: true,
      }).then();
    }
  }

  _handleChat(msg, bot, vocabulary) {
    const answer = this._getAnswer(msg.text, vocabulary);
    if (answer) {
      bot.sendMessage(msg.chat.id, answer, {
        parse_mode: "markdown",
        disable_web_page_preview: true,
        reply_to_message_id: msg.message_id,
      }).then();
    }
  }

  _getAnswer(text, vocabulary) {
    for (let i = 0; i < vocabulary.length; i++) {
      const option = vocabulary[i];
      for (let j = 0; j < option.questions.length; j++) {
        const normalizedMsgText = normalizeText(text);
        const normalizedQuestion = normalizeText(option.questions[j]);
        if (normalizedMsgText.indexOf(normalizedQuestion) !== -1) {
          console.log('Found answer for question: ', normalizedMsgText);
          return option.answer;
        }
      }
    }

    return null;
  }

  _getName(msg) {
    let result = '–ë–µ–∑ –∏–º–µ–Ω–∏ üë§';
    const fname = msg.from.first_name;
    const lname = msg.from.last_name;
    const uname = msg.from.username;

    if (fname) {
      result = fname + ( lname ? ' ' + lname : '') ;
    } else if (uname) {
      result = uname;
    }

    return result;
  }
}

module.exports = VadimcppBotApp;
